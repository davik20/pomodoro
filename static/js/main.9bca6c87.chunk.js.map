{"version":3,"sources":["components/Control.jsx","components/timeInput.jsx","components/Settings.jsx","components/Timer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Control","handleChangeTime","active","className","onClick","TimeInput","duration","handleIncrement","handleDecrement","handleInputChange","type","value","onChange","e","Settings","appDuration","handleApplySettings","handleToggleSettings","appColor","color","appFont","font","useState","setDuration","setColor","setFont","useEffect","console","log","min","handleChangeColor","handleChangeFont","target","pomodoro","shortBreak","longBreak","Timer","timer","handleToggleTimer","sec","play","current","toString","length","width","height","id","x1","y1","x2","y2","offset","stop-color","stroke","stroke-width","fill","r","cx","cy","class","App","timerInterval","useRef","setActive","setTimer","showSettings","setShowSettings","remainingTimeInSec","totalTimeInSec","percentangeDone","initialMin","initalSec","clearRing","circle","document","querySelector","circumference","baseVal","Math","PI","style","strokeDashoffset","time","clearInterval","radius","initialSec","initialTimer","interval","setInterval","countDown","fontFamily","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oQAceA,MAXf,YAA8C,IAA5BC,EAA2B,EAA3BA,iBAAkBC,EAAS,EAATA,OAChC,OACI,sBAAKC,UAAU,WAAf,UAEA,wBAAQC,QAAS,kBAAIH,EAAiB,aAAaE,UAAS,oBAA0B,aAAXD,EAAwB,SAAW,IAA9G,sBACE,wBAAQE,QAAS,kBAAIH,EAAiB,eAAeE,UAAS,oBAA0B,eAAXD,EAA0B,SAAW,IAAlH,yBACA,wBAAQE,QAAS,kBAAKH,EAAiB,cAAcE,UAAS,oBAA0B,cAAXD,EAAyB,SAAW,IAAjH,4B,aCSKG,MAhBf,YAA2F,IAAvEC,EAAsE,EAAtEA,SAAUC,EAA4D,EAA5DA,gBAAiBC,EAA2C,EAA3CA,gBAAiBC,EAA0B,EAA1BA,kBAAmBC,EAAO,EAAPA,KAC/E,OACA,sBAAKP,UAAU,wCAAf,UACI,0CACA,sBAAKA,UAAU,iBAAf,UACW,uBAAOQ,MAAQL,EAAWM,SAAU,SAACC,GAAD,OAAKJ,EAAkBI,EAAEH,MAE7D,sBAAKP,UAAU,oBAAf,UACQ,mBAAGC,QAASG,EAAiBJ,UAAU,sCACvC,mBAAGC,QAASI,EAAiBL,UAAU,kDCiKnDW,MApKf,YAAoH,IAAvFC,EAAsF,EAAhGT,SAAuBU,EAAyE,EAAzEA,oBAAqBC,EAAoD,EAApDA,qBAA4BC,EAAwB,EAA9BC,MAAoBC,EAAU,EAAfC,KAAe,EAE/EC,mBAAS,MAFsE,mBAExGhB,EAFwG,KAE9FiB,EAF8F,OAGrFD,mBAAS,MAH4E,mBAGxGH,EAHwG,KAGjGK,EAHiG,OAIvFF,mBAAS,MAJ8E,mBAIxGD,EAJwG,KAIlGI,EAJkG,KAM/GC,qBAAU,WAENH,EAAYR,GACZS,EAASN,GACTO,EAAQL,KAET,IAOJ,IAAMb,EAAkB,SAACG,GACxBiB,QAAQC,IAAItB,EAASI,IAEZa,GAAY,SAAAjB,GAChB,OACgB,2BACDA,GADC,kBAEHI,EAFG,2BAGGJ,EAASI,IAHZ,IAIAmB,IAAMvB,EAASI,GAAMmB,IAAM,GAAKvB,EAASI,GAAMmB,IAAM,EAAIvB,EAASI,GAAMmB,YAS3FrB,EAAkB,SAACE,GACrBiB,QAAQC,IAAIlB,GACfa,GAAY,SAAAjB,GACR,OACgB,2BACDA,GADC,kBAEHI,EAFG,2BAGGJ,EAASI,IAHZ,IAIAmB,IAAMvB,EAASI,GAAMmB,IAAM,EAAIvB,EAASI,GAAMmB,IAAM,EAAIvB,EAASI,GAAMmB,YAUrFC,EAAoB,SAACX,GACxBK,EAASL,IAGNY,EAAmB,SAACV,GACvBI,EAAQJ,IAINZ,EAAoB,SAACI,EAAGH,GAClBG,EAAEmB,OAAOrB,OA0BlB,OAAIL,EASI,mCAIA,qBAAKH,UAAU,gBAAf,SACQ,sBAAKA,UAAU,wBAAf,UACI,wBAAQC,QAAS,kBAAKY,EAAoBV,EAAUa,EAAOE,IAAOlB,UAAU,uBAA5E,mBAGI,sBAAKA,UAAU,wBAAf,UACI,0CACA,mBAAGC,QAASa,EAAsBd,UAAU,mBAGlD,sBAAKA,UAAU,sBAAf,UACI,gDACA,sBAAKA,UAAU,eAAf,UACD,cAAC,EAAD,CAAWM,kBAAmBA,EAAmBH,SAAUA,EAAS2B,SAASJ,IAAKtB,gBAAiB,kBAAKA,EAAgB,aAAaG,KAAK,WAAWF,gBAAiB,kBAAIA,EAAgB,eAE3L,cAAC,EAAD,CAAWC,kBAAmBA,EAAmBH,SAAUA,EAAS4B,WAAWL,IAAKtB,gBAAiB,kBAAKA,EAAgB,eAAeG,KAAK,aAAcF,gBAAiB,kBAAIA,EAAgB,iBAEjM,cAAC,EAAD,CAAWC,kBAAmBA,EAAmBH,SAAUA,EAAS6B,UAAUN,IAAKtB,gBAAiB,kBAAKA,EAAgB,cAAcG,KAAK,YAAaF,gBAAiB,kBAAIA,EAAgB,sBAKhM,sBAAKL,UAAU,wBAAf,UACC,sBAAKA,UAAU,eAAf,UACc,oBAAIA,UAAU,wCAAd,kBAIA,sBAAKA,UAAU,sCAAf,UACI,qBAAKC,QAAU,kBAAK2B,EAAiB,SAAU5B,UAAS,eAAmB,SAATkB,GAAmB,SAA7B,YAAxD,gBACA,qBAAKjB,QAAU,kBAAK2B,EAAiB,cAAe5B,UAAS,eAAmB,cAATkB,GAAwB,SAAlC,YAA7D,gBACA,qBAAKjB,QAAU,kBAAK2B,EAAiB,cAAe5B,UAAS,eAAmB,cAATkB,GAAwB,SAAlC,YAA7D,sBAId,sBAAKlB,UAAU,gBAAf,UACU,oBAAIA,UAAU,uCAAd,mBAIA,sBAAKA,UAAU,uCAAf,UACI,sBAAKC,QAAU,kBAAK0B,EAAkB,uBAAwB3B,UAAS,yBAAvE,cAA+G,uBAAVgB,GAAkC,mBAAGhB,UAAU,gBAApJ,OACA,qBAAKC,QAAU,kBAAK0B,EAAkB,uBAAwB3B,UAAU,iBAAxE,SAAoG,uBAAVgB,GAAkC,mBAAGhB,UAAU,kBACzI,qBAAMC,QAAS,kBAAK0B,EAAkB,uBAAwB3B,UAAU,iBAAxE,SAAoG,uBAAVgB,GAAkC,mBAAGhB,UAAU,kCAtD1K,2C,MCxCIiC,MAzDf,YAA4C,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,kBACdT,EAAkBQ,EAAlBR,IAAKU,EAAaF,EAAbE,IAAKC,EAAQH,EAARG,KAETC,EAAUD,EAAO,QAAU,OAOjC,OALAX,EAAMA,EAAIa,WACVH,EAAMA,EAAIG,WACVb,EAAMA,EAAIc,OAAS,EAAb,WAAqBd,GAAQA,EACnCU,EAAMA,EAAII,OAAS,EAAb,WAAqBJ,GAAQA,EAG/B,sBAAKpC,UAAU,QAAQC,QAASkC,EAAhC,UACoB,sBAEInC,UAAU,aACVyC,MAAM,MACNC,OAAO,MAJX,UAMQ,+BACA,iCAAgBC,GAAG,WAAWC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,OAAzD,UACA,sBAAMC,OAAO,KAAKC,aAAW,qBAC7B,sBAAMD,OAAO,OAAOC,aAAW,wBAGvC,wBAEIjD,UAAU,qBACVkD,OAAO,kBACPC,eAAa,OACbC,KAAK,cACLC,EAAE,MACFC,GAAG,MACHC,GAAG,WAEP,qBACIC,MAAM,gBACNf,MAAM,MACNC,OAAO,MAHX,SAKA,wBACIc,MAAM,wBACNN,OAAO,MACPC,eAAa,MACbC,KAAK,cACLC,EAAE,MACFC,GAAG,MACHC,GAAG,UAEC,sBAAKvD,UAAU,cAAf,UACJ,oBAAIA,UAAS,yBAAoBqC,EAAO,SAAW,IAAnD,mBAA6DX,EAA7D,YAAoEU,KACpE,mBAAGpC,UAAU,iBAAb,SAA+BsC,W,MCmVhDmB,MAhYf,WACI,IAAIC,EAAgBC,iBAAO,SADhB,GAEeA,iBAAO,MAENxC,mBAAS,uBAJzB,mBAIJH,EAJI,KAIGK,EAJH,OAKaF,mBAAS,QALtB,mBAKJD,EALI,KAKEI,EALF,OAMiBH,mBAAS,YAN1B,mBAMJpB,EANI,KAMI6D,EANJ,OAQezC,mBAAS,CAC/BO,IAAK,GACLU,IAAK,KAVE,mBAQJF,EARI,KAQG2B,EARH,OAcqB1C,mBAAS,CACrCW,SAAU,CACNJ,IAAK,EACLU,IAAK,IAETL,WAAa,CACTL,IAAK,EACLU,IAAK,GAETJ,UAAY,CACRN,IAAK,GACLU,IAAK,KAzBF,mBAcJjC,EAdI,KAcMiB,EAdN,OA6B6BD,oBAAS,GA7BtC,mBA6BJ2C,EA7BI,KA6BUC,EA7BV,KAgCXxC,qBAAU,WAkBN,OAhBAsC,GAAS,SAAA3B,GACN,OACM,2BACE/B,EAASJ,IADX,IAEDsC,MAAM,EACN2B,mBAAoB,KACpBC,eAAgB,KAChBC,gBAAiB,KACjBC,WAAY,KACZC,UAAW,UAOZ,eAGR,CAACjE,IAEJoB,qBAAU,WAkBN,OAjBAsC,GAAS,SAAA3B,GACR,OACS,aAEDG,MAAM,EACN2B,mBAAoB,KACpBC,eAAgB,KAChBC,gBAAiB,KACjBC,WAAY,KACZC,UAAW,MACTjE,EAAS2B,aAOb,eAGR,IAoKP,IA6FUhB,EAAuB,WAEzBiD,GAAiBD,IAIfO,EAAY,WAEd,IAAMC,EAASC,SAASC,cAAc,0BAEhCC,EAAyB,EADhBH,EAAOjB,EAAEqB,QAAQlE,MACGmE,KAAKC,GACxCN,EAAOO,MAAMC,iBAAmBL,GAWpC,OACG,sBAAMzE,UAAU,MAAhB,SACM,sBAAKA,UAAU,WAAf,UACO,oBAAIA,UAAU,oBAAd,sBAEA,qBAAKA,UAAU,qBAAf,SAEK,cAAC,EAAD,CAASD,OAAQA,EAAQD,iBArDrB,SAACiF,GACtBC,cAActB,EAAcpB,SAC5B+B,IACIR,GAAS,SAAC3B,GAEP,OAAY,2BACLA,GADK,IAEXG,MAAM,EACN2B,mBAAoB,KACpBC,eAAgB,KAChBC,gBAAiB,KACjBC,WAAY,KACZC,UAAW,MAEJjE,EAAS4E,OAMpBnB,EAAUmB,QAqCF,qBAAK/E,UAAU,kBAAf,SACK,cAAC,EAAD,CAAQkC,MAAOA,EAAOC,kBAzFjB,WACtB,IAAID,EAAMG,KAYN,OAXA2C,cAActB,EAAcpB,SAxMrC,WAEC,IAAMgC,EAASC,SAASC,cAAc,0BAChCS,EAASX,EAAOjB,EAAEqB,QAAQlE,MAEhCgB,QAAQC,IAAIwD,GAEb,IAESjC,EAGAiB,EACAD,EACAE,EACAC,EACAe,EATHT,EAAyB,EAATQ,EAAaN,KAAKC,GAI9BlD,EAAYQ,EAAZR,IAAKU,EAAOF,EAAPE,IAOX,GAAwB,OAArBF,EAAMiC,WAAoB,CACzB3C,QAAQC,IAAI,UACP,IAAI0D,EAAY,eAAOjD,GAEtBiC,EAAcgB,EAAazD,IAC1BwD,EAAaC,EAAa/C,IAC5BZ,QAAQC,IAAI0C,GACXF,EAA+B,GAAbE,EAAoB/B,EAIvCyB,GAAS,SAAA3B,GACL,OACS,2BACEA,GADF,IAED+B,iBACAE,aACAe,uBAQnBjB,EAAkB/B,EAAM+B,eACxBD,EAAqB9B,EAAM8B,mBAE3BG,EAAajC,EAAMiC,WACnBe,EAAahD,EAAMkC,UAUjB,IAAMgB,EAAWC,aAAY,WACb,IAARjD,GAAaV,EAAM,GAElBmC,GAAS,SAAA3B,GACL,OACS,2BACCA,GADD,IAEDR,IAAKQ,EAAMR,IAAM,EAAIQ,EAAMR,IAAK,EAAIQ,EAAMR,IAC1CU,IAAM,QAKlBV,EAAMA,EAAM,EAAIA,EAAK,EAAIA,EACzBU,EAAM,IAQM,IAARA,GAAqB,IAARV,GACbsD,cAAcI,GAEdvB,GAAS,SAAA3B,GACL,OACS,uCACEA,GACA/B,EAASJ,IAFX,IAIDsC,MAAM,OAIlBgC,MAMJR,GAAS,SAAC3B,GACN,OAAY,2BACJA,GADI,IAEPE,IAAMF,EAAME,IAAM,EAAIF,EAAME,IAAM,EAAIF,EAAME,SAMpDA,EAAMA,EAAM,EAAIA,EAAM,EAAIA,GAMR,OAArBF,EAAMiC,YAKRnB,EAASyB,GAFTP,EAAkB,KADlBF,EAA4B,GAANtC,EAAYU,GACW6B,EAAkB,KAEpB,IAAOQ,EAElDjD,QAAQC,IAAIgD,EAAgB,IAAMzB,GAEjCxB,QAAQC,IAAI,UACZ6C,EAAOO,MAAMC,iBAAmB9B,IAMjCA,EAASyB,GADTP,EAAiB,KADjBF,EAA4B,GAANtC,EAAYU,GACU6B,EAAkB,KACnB,IAAOQ,EAClDjD,QAAQC,IAAIuB,GACZsB,EAAOO,MAAMC,iBAAmB9B,GAGhCa,GAAS,SAAA3B,GACL,OACS,2BACEA,GADF,IAED8B,qBACAE,kBACAD,sBAYZP,EAAcpB,QAAU8C,IAEzB,KA+CHE,QACAzB,GAAS,SAAA3B,GACL,OACS,2BACEA,GADF,IAEDG,MAAM,OAQnBH,EAAMG,OACL2C,cAActB,EAAcpB,SAC5Bd,QAAQC,IAAIiC,EAAcpB,SAC1BuB,GAAS,SAAA3B,GACL,OACS,2BACEA,GADF,IAEDG,MAAM,aAqEV,sBAAKrC,UAAU,qBAAf,UACI,qBAAKC,QAAS,kBAAIa,KAAwBd,UAAU,WAApD,SACA,mBAAGwD,MAAM,iBAERM,GAAgB,cAAC,EAAD,CAAW9C,MAAOA,EAAOE,KAAMA,EAAOf,SAAUA,EAAUU,oBAtIvE,SAACV,EAAUa,EAAOE,GAG1C8D,cAActB,EAAcpB,SAC5B+B,IACAjD,EAAYjB,GAEZ0D,GAAS,SAAA3B,GACL,OACS,uCACEA,GACA/B,EAASJ,IAFX,IAIDsC,MAAM,OAMNkC,SAASC,cAAc,QAEhCK,MAAMU,WAAarE,EACtBI,EAAQJ,GACZM,QAAQC,IAAIP,GACRG,EAASL,GAGMuD,SAASC,cAAc,0BAE/BK,MAAM3B,OAASlC,EAGtBF,KAsGyIA,qBAAsBA,aCnXpJ0E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5B,SAAS6B,eAAe,SAM1BZ,M","file":"static/js/main.9bca6c87.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../css/control.css'\r\n\r\nfunction Control({handleChangeTime, active}) {\r\n    return (\r\n        <div className=\"controls\">\r\n                            \r\n        <button onClick={()=>handleChangeTime('pomodoro')} className={`appButton ${active === 'pomodoro' ? 'active' : ''}`}>pomodoro</button>\r\n          <button onClick={()=>handleChangeTime('shortBreak')} className={`appButton ${active === 'shortBreak' ? 'active' : ''}`}>short break</button>\r\n          <button onClick={()=> handleChangeTime('longBreak')} className={`appButton ${active === 'longBreak' ? 'active' : ''}`}>long break</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Control\r\n","import React from 'react'\r\n\r\nfunction TimeInput({duration, handleIncrement, handleDecrement, handleInputChange, type}) {\r\n    return (\r\n    <div className=\"  col-xs-12 col-md-4 timeBox__control\">\r\n        <p> pomodoro</p>\r\n        <div className=\"timeBox__input\">\r\n                   <input value ={duration}  onChange={(e)=>handleInputChange(e,type)}/>\r\n\r\n                   <div className=\"timeBox__controls\">\r\n                           <i onClick={handleIncrement} className=\"timeBox__increase fas fa-caret-up\"></i>\r\n                           <i onClick={handleDecrement} className=\"timeBox__decrease fas fa-caret-down\"></i>\r\n                   </div>\r\n        </div>\r\n   </div>\r\n    )\r\n}\r\n\r\nexport default TimeInput\r\n","import React, {useState, useEffect} from 'react'\r\nimport '../css/settings.css'\r\nimport TimeInput from './timeInput'\r\n\r\n\r\n\r\n\r\n\r\nfunction Settings({duration: appDuration, handleApplySettings, handleToggleSettings, color:appColor,font:appFont}) {\r\n\r\n    const [duration, setDuration] = useState(null)\r\n    const [color, setColor] = useState(null)\r\n    const [font, setFont] = useState(null)\r\n\r\n    useEffect(()=> {\r\n\r\n        setDuration(appDuration)\r\n        setColor(appColor)\r\n        setFont(appFont)\r\n\r\n    }, [])\r\n\r\n\r\n\r\n\r\n    \r\n// Handles increasing the timer\r\n   const handleIncrement = (type) => {\r\n    console.log(duration[type])\r\n\r\n             setDuration(duration => {\r\n         return (\r\n                 duration = {\r\n                     ...duration,\r\n                     [type] : {\r\n                         ...duration[type],\r\n                         min : duration[type].min < 60 ? duration[type].min + 1 : duration[type].min\r\n                     }\r\n                 }\r\n                 )\r\n             })\r\n \r\n }\r\n\r\n // Handles Decreasing the timer\r\nconst handleDecrement = (type) => {\r\n    console.log(type)\r\n setDuration(duration => {\r\n     return (\r\n             duration = {\r\n                 ...duration,\r\n                 [type] : {\r\n                     ...duration[type],\r\n                     min : duration[type].min > 0 ? duration[type].min - 1 : duration[type].min \r\n                 }\r\n                \r\n             }\r\n             )\r\n         })\r\n\r\n }\r\n\r\n\r\n const handleChangeColor = (color)=> {\r\n    setColor(color)\r\n    \r\n}\r\n const handleChangeFont = (font)=> {\r\n    setFont(font)\r\n    \r\n}\r\n\r\nconst handleInputChange = (e, type)=> {\r\nlet value = e.target.value;\r\nreturn\r\n value =Number(value)\r\n\r\n console.log(typeof(value))\r\n    if(typeof(value) != 'number'){\r\n        return;\r\n    }\r\n    setDuration(duration => {\r\n        return (\r\n            duration = {\r\n                ...duration,\r\n                [type] : {\r\n                    ...duration[type],\r\n                    min : e.target.value\r\n                }\r\n               \r\n            }\r\n            )\r\n    })\r\n   \r\n}\r\n\r\n\r\n\r\n // Conditionally rendering the JXS due to the duration not rendering immediately the component mounts\r\n   if(!duration){\r\n       return (\r\n           <div>Loading</div> \r\n       )\r\n   }else {\r\n\r\n       return (\r\n    \r\n         \r\n           <>\r\n\r\n         \r\n    \r\n           <div className=\"settingsModal\">\r\n                   <div className=\"settingModal__content\">\r\n                       <button onClick={()=> handleApplySettings(duration, color, font)} className=\"settingModal__submit\">\r\n                           Apply\r\n                       </button>\r\n                           <div className=\"settingsModal__header\"> \r\n                               <h1>Settings</h1>\r\n                               <i onClick={handleToggleSettings} className=\"fa fa-times\"></i>\r\n                         </div>\r\n    \r\n                         <div className=\"settingsModal__body\">\r\n                             <h3>TIME (MINUTES)</h3>   \r\n                             <div className=\"timeBox row \">\r\n                            <TimeInput handleInputChange={handleInputChange} duration={duration.pomodoro.min} handleIncrement={()=> handleIncrement('pomodoro')} type=\"pomodoro\" handleDecrement={()=>handleDecrement('pomodoro')} />\r\n                            \r\n                           <TimeInput handleInputChange={handleInputChange} duration={duration.shortBreak.min} handleIncrement={()=> handleIncrement('shortBreak')} type=\"shortBreak\"  handleDecrement={()=>handleDecrement('shortBreak')}  />\r\n    \r\n                           <TimeInput handleInputChange={handleInputChange} duration={duration.longBreak.min} handleIncrement={()=> handleIncrement('longBreak')} type=\"longBreak\"  handleDecrement={()=>handleDecrement('longBreak')}  />\r\n                               \r\n                             </div>\r\n                         </div>\r\n\r\n                         <div className=\"settingsModal__footer\">\r\n                          <div className=\"row fontBox \">\r\n                                        <h3 className=\"fontBox__heading col-sm-12 col-md-6  \">\r\n                                            FONT\r\n                                        </h3>\r\n\r\n                                        <div className=\"fontBox__options col-sm-12 col-md-6\">\r\n                                            <div onClick ={()=> handleChangeFont(\"Lato\")}  className={`font ${font === \"Lato\" && 'active'} font--1`}>Aa</div>\r\n                                            <div onClick ={()=> handleChangeFont(\"Redressed\")}  className={`font ${font === \"Redressed\" && 'active'} font--1`}>Aa</div>\r\n                                            <div onClick ={()=> handleChangeFont(\"Comfortaa\")}  className={`font ${font === \"Comfortaa\" && 'active'} font--1`}>Aa</div>\r\n                                        </div>\r\n\r\n                              </div>\r\n                              <div className=\"row colorBox \">\r\n                                        <h3 className=\"colorBox__heading col-sm-12 col-md-6\">\r\n                                            COLOR\r\n                                        </h3>\r\n\r\n                                        <div className=\"colorBox__options col-sm-12 col-md-6\">\r\n                                            <div onClick ={()=> handleChangeColor('rgb(228, 122, 122)')}  className={`color  active color--1`}> {color === 'rgb(228, 122, 122)' && <i className=\"fa fa-check\"></i> } </div>\r\n                                            <div onClick ={()=> handleChangeColor('rgb(113, 242, 248)')}  className=\"color color--2\">{color === 'rgb(113, 242, 248)' && <i className=\"fa fa-check\"></i> }</div>\r\n                                            <div  onClick={()=> handleChangeColor('rgb(217, 130, 247)')}  className=\"color color--3\">{color === 'rgb(217, 130, 247)' && <i className=\"fa fa-check\"></i> }</div>\r\n                                        </div>\r\n\r\n                              </div>\r\n                         </div>\r\n    \r\n    \r\n                   </div>\r\n           </div>\r\n           \r\n           </>\r\n    \r\n       )\r\n   }\r\n    \r\n}\r\n\r\nexport default Settings\r\n","import { min } from 'lodash'\r\nimport React from 'react'\r\nimport '../css/timer.css'\r\n\r\nfunction Timer({timer, handleToggleTimer}) {\r\n    let {min, sec, play} = timer\r\n   \r\n    const current = play ? 'PAUSE' : 'PLAY'\r\n\r\n    min = min.toString()\r\n    sec = sec.toString()\r\n    min = min.length < 2 ? `0${min}` : min\r\n    sec = sec.length < 2 ? `0${sec}` : sec\r\n\r\n    return (\r\n        <div className=\"timer\" onClick={handleToggleTimer}>\r\n                            <svg\r\n                            // ref = {circle}\r\n                                className=\"background\"\r\n                                width=\"350\"\r\n                                height=\"350\"\r\n                                >\r\n                                    <defs>\r\n                                    <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n                                    <stop offset=\"0%\" stop-color=\"rgba(0,0,0, .01)\" />\r\n                                    <stop offset=\"100%\" stop-color=\"rgb(41,45, 82)\" />\r\n                                    </linearGradient>\r\n                                </defs>\r\n                            <circle\r\n                               \r\n                                className=\"background__circle\"\r\n                                stroke=\" url(#gradient)\"\r\n                                stroke-width=\"12.5\"\r\n                                fill=\"transparent\"\r\n                                r=\"150\"\r\n                                cx=\"175\"\r\n                                cy=\"175\"/>\r\n                            </svg>\r\n                            <svg\r\n                                class=\"progress-ring\"\r\n                                width=\"290\"\r\n                                height=\"290\"\r\n                                >\r\n                            <circle\r\n                                class=\"progress-ring__circle\"\r\n                                stroke=\"red\"\r\n                                stroke-width=\"7.5\"\r\n                                fill=\"transparent\"\r\n                                r=\"130\"\r\n                                cx=\"145\"\r\n                                cy=\"145\"/>\r\n                            </svg>\r\n                                    <div className=\"timer__ring\">\r\n                                <h1 className={`timer__display ${play ? ' scale' : ''}`}>{`${min}:${sec}`}</h1>\r\n                                <p className=\"timer__control\">{current}</p>\r\n                                \r\n                            </div>\r\n     </div>\r\n    )\r\n}\r\n\r\nexport default Timer\r\n","import { initial } from 'lodash';\r\nimport React, {useState, useEffect, useRef} from 'react';\r\nimport _ from 'lodash'\r\nimport Control from './components/Control'\r\nimport Settings from './components/Settings';\r\nimport Timer from './components/Timer';\r\nimport './css/app.css';\r\n\r\n\r\nfunction App() {\r\n    let timerInterval = useRef('davik')\r\n    let circumferenceOffset = useRef(null)\r\n   \r\n    const [color, setColor ] = useState('rgb(228, 122, 122)')\r\n    const [font, setFont] = useState(\"Lato\")\r\n    const [active, setActive] = useState('pomodoro')\r\n\r\n    const [timer, setTimer] = useState({\r\n        min: '',\r\n        sec: '',\r\n      \r\n    })\r\n\r\n    const [duration, setDuration] = useState({\r\n        pomodoro: {\r\n            min: 1,\r\n            sec: 15\r\n        },\r\n        shortBreak : {\r\n            min: 7,\r\n            sec: 0\r\n        },\r\n        longBreak : {\r\n            min: 19,\r\n            sec: 0\r\n        }\r\n    })\r\n\r\n    const [showSettings, setShowSettings] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        \r\n        setTimer(timer => {\r\n           return (\r\n            timer = {\r\n                ...duration[active],\r\n                play: false,\r\n                remainingTimeInSec: null,\r\n                totalTimeInSec: null,\r\n                percentangeDone: null,\r\n                initialMin: null,\r\n                initalSec: null,\r\n\r\n\r\n            }\r\n           ) \r\n            \r\n        })\r\n        return () => {\r\n            \r\n        }\r\n    }, [duration])\r\n\r\n    useEffect(() => {\r\n        setTimer(timer => {\r\n         return (\r\n             timer = {\r\n                 \r\n                 play: false,\r\n                 remainingTimeInSec: null,\r\n                 totalTimeInSec: null,\r\n                 percentangeDone: null,\r\n                 initialMin: null,\r\n                 initalSec: null,\r\n                ...duration.pomodoro,\r\n\r\n             }\r\n         )\r\n            }\r\n         \r\n         )\r\n        return () => {\r\n           \r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n   function countDown (){\r\n    \r\n    const circle = document.querySelector('.progress-ring__circle');\r\n    const radius = circle.r.baseVal.value;\r\n\r\n    console.log(radius)\r\n  \r\n   const circumference = radius * 2 * Math.PI;\r\n \r\n        let offset;\r\n   \r\n        let {min, sec} = timer\r\n        let totalTimeInSec;\r\n        let remainingTimeInSec;\r\n        let percentangeDone;\r\n        let initialMin;\r\n        let initialSec;\r\n\r\n       if(timer.initialMin === null){\r\n           console.log('initak')\r\n                let initialTimer = {...timer}\r\n\r\n                 initialMin  = initialTimer.min\r\n                  initialSec = initialTimer.sec\r\n                console.log(initialMin)\r\n                 totalTimeInSec = (initialMin * 60 ) + sec;\r\n\r\n                \r\n\r\n                setTimer(timer => {\r\n                    return (\r\n                        timer = {\r\n                            ...timer,\r\n                            totalTimeInSec,\r\n                            initialMin,\r\n                            initialSec,\r\n                           \r\n                            \r\n                        }\r\n                    )\r\n                })\r\n       }else {\r\n             \r\n         totalTimeInSec =  timer.totalTimeInSec\r\n         remainingTimeInSec = timer.remainingTimeInSec\r\n       \r\n         initialMin = timer.initialMin\r\n         initialSec = timer.initalSec\r\n\r\n           \r\n       }\r\n      \r\n\r\n        \r\n        \r\n        \r\n       \r\n           const interval = setInterval(()=> {\r\n                if(sec === 0 && min > 0){\r\n                    \r\n                    setTimer(timer => {\r\n                        return (\r\n                            timer = {\r\n                               ...timer,\r\n                                min: timer.min > 0 ? timer.min -1 : timer.min,\r\n                                sec : 59\r\n                            }\r\n                        )\r\n                    })\r\n\r\n                    min = min > 0 ? min -1 : min\r\n                    sec = 59\r\n\r\n                    \r\n                   \r\n                    \r\n               \r\n                }\r\n\r\n                else if(sec === 0 && min === 0){\r\n                        clearInterval(interval)\r\n                        \r\n                        setTimer(timer => {\r\n                            return (\r\n                                timer = {\r\n                                    ...timer,\r\n                                    ...duration[active],\r\n                                    \r\n                                    play: false\r\n                                }\r\n                            )\r\n                        })\r\n                        clearRing()\r\n                }\r\n                \r\n                \r\n                \r\n                else  {\r\n                    setTimer((timer)=> {\r\n                        return timer = {\r\n                             ...timer,\r\n                             sec : timer.sec > 0 ? timer.sec - 1 : timer.sec\r\n                         }\r\n                             \r\n     \r\n                     })\r\n\r\n                     sec = sec > 0 ? sec - 1 : sec\r\n    \r\n    \r\n                }\r\n\r\n\r\n               if(timer.initialMin === null){\r\n                    \r\n                remainingTimeInSec = (min * 60) + sec;\r\n                percentangeDone = 100 - ((remainingTimeInSec/totalTimeInSec) * 100)\r\n                \r\n                offset = circumference - ((percentangeDone/100) * circumference);\r\n\r\n                console.log(circumference + \" \" + offset)\r\n\r\n                 console.log('offset')\r\n                 circle.style.strokeDashoffset = offset;\r\n                \r\n               } else {\r\n\r\n                remainingTimeInSec = (min * 60) + sec;\r\n                percentangeDone =100 - ((remainingTimeInSec/totalTimeInSec) * 100)\r\n                offset = circumference - ((percentangeDone/100) * circumference);\r\n                console.log(offset)\r\n                circle.style.strokeDashoffset = offset;\r\n               }\r\n           \r\n                setTimer(timer => {\r\n                    return (\r\n                        timer = {\r\n                            ...timer,\r\n                            remainingTimeInSec,\r\n                            percentangeDone,\r\n                            totalTimeInSec\r\n                           \r\n                            \r\n                        }\r\n                    )\r\n                })\r\n            \r\n               \r\n\r\n                \r\n\r\n                // set interval id into ref\r\n                timerInterval.current = interval\r\n            \r\n            }, 1000)\r\n\r\n    }\r\n\r\n\r\n    \r\nconst handleApplySettings = (duration, color, font) => {\r\n\r\n  \r\n    clearInterval(timerInterval.current)\r\n    clearRing()\r\n    setDuration(duration)\r\n\r\n    setTimer(timer => {\r\n        return (\r\n            timer = {\r\n                ...timer,\r\n                ...duration[active],\r\n                \r\n                play: false\r\n            }\r\n        )\r\n    })\r\n\r\n\r\n    const app = document.querySelector('.app')\r\n\r\n   app.style.fontFamily = font\r\n    setFont(font)\r\nconsole.log(font)\r\n    setColor(color)\r\n\r\n    \r\n    const circle = document.querySelector('.progress-ring__circle');\r\n\r\n    circle.style.stroke = color\r\n\r\n\r\n    handleToggleSettings()\r\n        \r\n        \r\n    }\r\n\r\n\r\n    const handleToggleTimer = ()=> {\r\n        if(!timer.play){\r\n            clearInterval(timerInterval.current)\r\n            countDown()\r\n            setTimer(timer => {\r\n                return (\r\n                    timer = {\r\n                        ...timer,\r\n                        play: true\r\n                    }\r\n                )\r\n            })\r\n\r\n            return\r\n        }\r\n\r\n        if(timer.play){\r\n            clearInterval(timerInterval.current)\r\n            console.log(timerInterval.current)\r\n            setTimer(timer => {\r\n                return (\r\n                    timer = {\r\n                        ...timer,\r\n                        play: false\r\n                    }\r\n                )\r\n            })\r\n        }\r\n     \r\n    }\r\n\r\n    const handleChangeTime = (time) => {\r\n        clearInterval(timerInterval.current)\r\n        clearRing()\r\n            setTimer((timer)=> {\r\n                \r\n               return timer = {\r\n                   ...timer,\r\n                play: false,\r\n                remainingTimeInSec: null,\r\n                totalTimeInSec: null,\r\n                percentangeDone: null,\r\n                initialMin: null,\r\n                initalSec: null,\r\n                    \r\n                    ...duration[time]\r\n                }\r\n\r\n\r\n            })\r\n\r\n            setActive(time)\r\n\r\n    }\r\n\r\n    const handleToggleSettings = ()=> {\r\n\r\n        setShowSettings(!showSettings)\r\n\r\n    }\r\n\r\n    const clearRing = ()=> {\r\n\r\n        const circle = document.querySelector('.progress-ring__circle');\r\n        const radius = circle.r.baseVal.value;\r\n        const circumference = radius * 2 * Math.PI;\r\n        circle.style.strokeDashoffset = circumference\r\n    }\r\n\r\n   \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n       <main className=\"app\">\r\n             <div className=\"pomodoro\">\r\n                    <h1 className=\"pomodoro__heading\">pomodoro</h1>\r\n\r\n                    <div className=\"pomodoro__controls\">\r\n\r\n                         <Control active={active} handleChangeTime={handleChangeTime}/>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"pomodoro__timer\">\r\n                         <Timer  timer={timer} handleToggleTimer={handleToggleTimer}/>\r\n                    </div>\r\n\r\n                    <div className=\"pomodoro__settings\">\r\n                        <div onClick={()=>handleToggleSettings()} className=\"settings\">\r\n                        <i class=\"fas fa-cog\"></i>\r\n                        </div>\r\n                        {showSettings && <Settings  color={color} font={font}  duration={duration} handleApplySettings={handleApplySettings} handleToggleSettings={handleToggleSettings}/>}\r\n                           \r\n\r\n                    </div>\r\n\r\n             </div>\r\n       </main>\r\n    )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}